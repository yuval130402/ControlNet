#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Jan 19, 2020 05:02:54 PM +0200  platform: Windows NT
#    Feb 28, 2020 04:59:19 PM +0200  platform: Windows NT
#    May 11, 2020 02:42:19 PM +0300  platform: Windows NT
"""gui_project.py - A file responsible for the user interface
 presented to the manager of the class, it is automatically built by page.
 gui_project_support.py - The file contains the UI functionality"""

import sys
from server_globals import common as common
import threading
import time
import server_big_project
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk
from tkinter import messagebox
try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def over_on(p1, btn):
    if btn == "Select_All":
        select_all["background"] = "#b7d2fd"
    else:
        clear_selection["background"] = "#b7d2fd"
    # sys.stdout.flush()

def over_off(p1, btn):
    if btn == "Select_All":
        select_all["background"] = "#83b4fc"
    else:
        clear_selection["background"] = "#83b4fc"
    # sys.stdout.flush()

def lock_button(p1):
    # The function is called when the manager presses the lock button
    common.selected_clients = selection_list()
    if len(common.selected_clients) != 0:
        common.conn_q.put("lock")
        #disable_buttons()
        w.Unlock_button.bind('<Button-1>', lambda e: unlock_button(e))
        w.Unlock_button["state"] = 'normal'
        w.Unlock_button["cursor"] = 'hand2'
    # sys.stdout.flush()

def unlock_button(p1):
    # The function is called when the manager presses the unlock button
    common.selected_clients = selection_list()
    if len(common.selected_clients) != 0:
        common.conn_q.put("unlock")
        enable_buttons()
    # sys.stdout.flush()

def start_share_screen(p1):
    # The function is called when the manager presses the start-share-screen button
    common.selected_clients = selection_list()
    if len(common.selected_clients) != 0:
        common.sharing_screen = True
        common.picture_flag = 1
        common.conn_q.put("send_screen")
        disable_buttons()
        w.Stop_Sharing.bind('<Button-1>', lambda e: stop_share_screen(e))
        w.Stop_Sharing["state"] = 'normal'
        w.Stop_Sharing["cursor"] = 'hand2'
    # sys.stdout.flush()

def stop_share_screen(p1):
    # The function is called when the manager presses the stop-share-screen button
    if common.sharing_screen is True:
        common.sharing_screen = False
        common.picture_flag = 0
        time.sleep(0.5)
        common.conn_q.put("send_stop")
        enable_buttons()
    # sys.stdout.flush()

def send_file(p1):
    # The function is called when the manager presses the send-file button
    common.selected_clients = selection_list()
    if len(common.selected_clients) != 0:
        common.conn_q.put("send_file")
    # sys.stdout.flush()

def turn_off(p1):
    # The function is called when the manager presses the turn-off button
    common.selected_clients = selection_list()
    if len(common.selected_clients) != 0:
        common.conn_q.put("turn_off")
    # sys.stdout.flush()

def turn_on(p1):
    # The function is called when the manager presses the turn-on button
    common.selected_clients = selection_list()
    if len(common.selected_clients) != 0:
        common.conn_q.put("turn_on")
    # sys.stdout.flush()

def watch_client(p1):
    # The function is called when the manager presses the watch-client-screen button
    common.selected_clients = selection_list()
    if len(common.selected_clients) != 0:
        common.conn_q.put("watch_screen")
    # sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root, select_all, clear_selection
    w = gui
    top_level = top
    root = top
    select_all = w.Select_All
    clear_selection = w.Clear_Selection
    top_level.protocol("WM_DELETE_WINDOW", destroy_window)
    main_connected = threading.Thread(target=server_big_project.main(), args=())
    main_connected.start()
    top.after(100, on_after_elapsed)

def disable_buttons():
    global w, top_level
    w.Lock_Button.unbind("<Button-1>")
    w.Lock_Button["state"] = 'disabled'
    w.Lock_Button["cursor"] = ''
    w.Unlock_button.unbind("<Button-1>")
    w.Unlock_button["state"] = 'disabled'
    w.Unlock_button["cursor"] = ''
    w.Start_Sharing.unbind("<Button-1>")
    w.Start_Sharing["state"] = 'disabled'
    w.Start_Sharing["cursor"] = ''
    w.Stop_Sharing.unbind("<Button-1>")
    w.Stop_Sharing["state"] = 'disabled'
    w.Stop_Sharing["cursor"] = ''
    w.TurnOn_Button.unbind("<Button-1>")
    w.TurnOn_Button["state"] = 'disabled'
    w.TurnOn_Button["cursor"] = ''
    w.TurnOff_Button.unbind("<Button-1>")
    w.TurnOff_Button["state"] = 'disabled'
    w.TurnOff_Button["cursor"] = ''
    w.SendFile_Button.unbind("<Button-1>")
    w.SendFile_Button["state"] = 'disabled'
    w.SendFile_Button["cursor"] = ''
    w.WatchScreen_Button.unbind("<Button-1>")
    w.WatchScreen_Button["state"] = 'disabled'
    w.WatchScreen_Button["cursor"] = ''

def enable_buttons():
    global w, top_level
    w.Lock_Button.bind('<Button-1>',lambda e: lock_button(e))
    w.Lock_Button["state"] = 'normal'
    w.Lock_Button["cursor"] = 'hand2'
    w.Unlock_button.bind('<Button-1>', lambda e: unlock_button(e))
    w.Unlock_button["state"] = 'normal'
    w.Unlock_button["cursor"] = 'hand2'
    w.Start_Sharing.bind('<Button-1>', lambda e: start_share_screen(e))
    w.Start_Sharing["state"] = 'normal'
    w.Start_Sharing["cursor"] = 'hand2'
    w.Stop_Sharing.bind('<Button-1>', lambda e: stop_share_screen(e))
    w.Stop_Sharing["state"] = 'normal'
    w.Stop_Sharing["cursor"] = 'hand2'
    w.TurnOn_Button.bind('<Button-1>', lambda e: turn_on(e))
    w.TurnOn_Button["state"] = 'normal'
    w.TurnOn_Button["cursor"] = 'hand2'
    w.TurnOff_Button.bind('<Button-1>', lambda e: turn_off(e))
    w.TurnOff_Button["state"] = 'normal'
    w.TurnOff_Button["cursor"] = 'hand2'
    w.SendFile_Button.bind('<Button-1>', lambda e: send_file(e))
    w.SendFile_Button["state"] = 'normal'
    w.SendFile_Button["cursor"] = 'hand2'
    w.WatchScreen_Button.bind('<Button-1>', lambda e: watch_client(e))
    w.WatchScreen_Button["state"] = 'normal'
    w.WatchScreen_Button["cursor"] = 'hand2'

def destroy_window():
    # Function which closes the window.
    global w, top_level
    MsgBox = tk.messagebox.askquestion('Exit ControlNet', 'Are you sure you want to exit the program?', icon='warning')
    if MsgBox == 'yes':
        root.destroy()
        common.conn_q.put("system_quit")
    else:
        tk.messagebox.showinfo('Return ControlNet', 'You will now return to the program screen')

def on_after_elapsed():
    # A function that adds a student to the list of students
    # presented to the teacher or deletes a disconnected student
    global w, top_level
    to = w.Clients_List
    if common.gui_q.empty() is False:
        text = common.gui_q.get()
        to.insert('end', text)
        print("size: " + str(to.size_()))
    top_level.after(1000, on_after_elapsed)
    #label = "Shrimp Tempura"
    #idx = to.get(0, tk.END).index(label)
    #to.delete(idx)

def selection_list():
    # A function that returns an array of student names selected by the teacher from the listbox
    global w, top_level
    cl = w.Clients_List
    selected = cl.curselection()
    selected_list = []
    if selected:  # only do stuff if user made a selection
        print(selected)
        for index in selected:
            selected_list.append(cl.get(index).strip())  # how you get the value of the selection from a listbox
    print(selected_list)
    return selected_list

def select_all_clients(p1):
    # The function marks all student computers as selected
    global w, top_level
    cl = w.Clients_List
    cl.select_set(0, 'end')  # select all
    print("select all")
    # sys.stdout.flush()

def clear_selection_listbox(p1):
    # The function deletes the student mark
    global w, top_level
    cl = w.Clients_List
    cl.select_clear(0, 'end')  # unselect all
    print("unselect all")
    # sys.stdout.flush()

if __name__ == '__main__':
    import gui_project
    gui_project.vp_start_gui()




